nextflow_process {

    name "Test Process RENAMEPAIREDFASTXHEADERS"
    script "../main.nf"
    process "RENAMEPAIREDFASTXHEADERS"

    tag "modules"
    tag "modules_"
    tag "renamepairedfastxheaders"

    test("mini sample should match snapshot") {

        when {
            process {
                """
                input[0] = [
		    ['id': 'test'],
		    [
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/ERR10889147_mini_1.fq.gz", checkIfExists: true),
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/ERR10889147_mini_2.fq.gz", checkIfExists: true),
		    ]
		]
		input[1] = file("${projectDir}/bin/rename_pe_reads.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("mini sample fasta should match snapshot") {

        when {
            process {
                """
                input[0] = [
		    ['id': 'test'],
		    [
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/ERR10889147_mini_1.fa.gz", checkIfExists: true),
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/ERR10889147_mini_2.fa.gz", checkIfExists: true),
		    ]
		]
		input[1] = file("${projectDir}/bin/rename_pe_reads.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("unbalanced (1>2) synthetic sample should match snapshot") {

        when {
            process {
                """
                input[0] = [
		    ['id': 'test'],
		    [
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/synthetic_test_ub1_1.fq.gz", checkIfExists: true),
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/synthetic_test_ub1_2.fq.gz", checkIfExists: true),
		    ]
		]
		input[1] = file("${projectDir}/bin/rename_pe_reads.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("unbalanced (2>1) synthetic sample should match snapshot") {

        when {
            process {
                """
                input[0] = [
		    ['id': 'test'],
		    [
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/synthetic_test_ub2_1.fq.gz", checkIfExists: true),
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/synthetic_test_ub2_2.fq.gz", checkIfExists: true),
		    ]
		]
		input[1] = file("${projectDir}/bin/rename_pe_reads.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

    test("mismatching names sythethic sample should match snapshot") {

        when {
            process {
                """
                input[0] = [
		    ['id': 'test'],
		    [
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/synthetic_test_mm_1.fq.gz", checkIfExists: true),
		        file("${projectDir}/tests/fixtures/renamepairedfastxheaders/synthetic_test_mm_2.fq.gz", checkIfExists: true),
		    ]
		]
		input[1] = file("${projectDir}/bin/rename_pe_reads.py")
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}
