nextflow_workflow {

    name "Test Subworkflow DECONTAM_SHORTREAD"
    script "../main.nf"
    workflow "DECONTAM_SHORTREAD"

    tag "subworkflows"
    tag "subworkflows_"
    tag "subworkflows/decontam_shortread"
    tag "bwamem"
    tag "bwamem/align"

    test("mini paired-end sample output should match snapshot") {

        when {
	    params {
	        remove_phix = true
	    }
            workflow {
                """
                input[0] = Channel.of([
		    ['id': 'test', 'single_end': false, 'platform': 'wgs'],
		    [
		        file("${projectDir}/tests/fixtures/decontam_shortread/ERR10889147_mini_1.fq.gz", checkIfExists: true),
		        file("${projectDir}/tests/fixtures/decontam_shortread/ERR10889147_mini_2.fq.gz", checkIfExists: true),
		    ]
		])
		input[1] = Channel.of([
		    ['id': 'host_genome', 'base_dir': '.', 'files': ['bwa_index_prefix': 'hg38_mini.fa', 'genome': 'hg38_mini.fa']],
		    file("${projectDir}/tests/fixtures/dbs/hg38_mini", checkIfExists: true)
		])
		input[2] = Channel.of([
		    ['id': 'phix', 'base_dir': '.', 'files': ['bwa_index_prefix': 'MN385565.fasta', 'genome': 'MN385565.fasta']],
		    file("${projectDir}/tests/fixtures/dbs/phix", checkIfExists: true)
		])
                """
            }
        }

        then {
	    def reads1 = path(workflow.out.decontaminated_reads.get(0)[1][0])
	        .linesGzip
		.collect{
	            if(it.charAt(0)=="@"){
	                return it
	 	    }
	        }
		.findAll{ it != null }
	        .sort()

	    def reads2 = path(workflow.out.decontaminated_reads.get(0)[1][1])
	        .linesGzip
		.collect{
	            if(it.charAt(0)=="@"){
	                return it
	 	    }
	        }
		.findAll{ it != null }
	        .sort()

            assert workflow.success
            assert snapshot(
                reads1, reads2, 
		// workflow.out.decontaminated_reads,
	        // workflow.out.host_stats, 
		// workflow.out.phix_stats, 
		workflow.out.versions
	    ).match()
        }

    }

    test("mini single-end sample output should match snapshot") {

        when {
	    params {
	        remove_phix = false
	    }
            workflow {
                """
                input[0] = Channel.of([
		    ['id': 'test', 'single_end': true, 'platform': 'wgs'],
		    file("${projectDir}/tests/fixtures/decontam_shortread/ERR10889147_mini_1.fq.gz", checkIfExists: true),
		])
		input[1] = Channel.of([
		    ['id': 'host_genome', 'base_dir': '.', 'files': ['bwa_index_prefix': 'hg38_mini.fa', 'genome': 'hg38_mini.fa']],
		    file("${projectDir}/tests/fixtures/dbs/hg38_mini", checkIfExists: true)
		])
		input[2] = Channel.of([
		    ['id': 'phix', 'base_dir': '.', 'files': ['bwa_index_prefix': 'MN385565.fasta', 'genome': 'MN385565.fasta']],
		    file("${projectDir}/tests/fixtures/dbs/phix", checkIfExists: true)
		])
                """
            }
        }

        then {
	    def reads1 = path(workflow.out.decontaminated_reads.get(0)[1])
	        .linesGzip
		.collect{
	            if(it.charAt(0)=="@"){
	                return it
	 	    }
	        }
		.findAll{ it != null }
	        .sort()

            assert workflow.success
            assert snapshot(
                reads1,  
		// workflow.out.decontaminated_reads,
	        // workflow.out.host_stats, 
		// workflow.out.phix_stats, 
		workflow.out.versions
	    ).match()
        }

    }

    test("mini sample with added hg38 synthetic reads output should match snapshot") {

        when {
	    params {
	        remove_phix = true
	    }
            workflow {
                """
                input[0] = Channel.of([
		    ['id': 'test', 'single_end': false, 'platform': 'wgs'],
		    [
		        file("${projectDir}/tests/fixtures/decontam_shortread/ERR10889147_mini_plus_hg38_1.fq.gz", checkIfExists: true),
		        file("${projectDir}/tests/fixtures/decontam_shortread/ERR10889147_mini_plus_hg38_2.fq.gz", checkIfExists: true),
		    ]
		])
		input[1] = Channel.of([
		    ['id': 'host_genome', 'base_dir': '.', 'files': ['bwa_index_prefix': 'hg38_mini.fa', 'genome': 'hg38_mini.fa']],
		    file("${projectDir}/tests/fixtures/dbs/hg38_mini", checkIfExists: true)
		])
		input[2] = Channel.of([
		    ['id': 'phix', 'base_dir': '.', 'files': ['bwa_index_prefix': 'MN385565.fasta', 'genome': 'MN385565.fasta']],
		    file("${projectDir}/tests/fixtures/dbs/phix", checkIfExists: true)
		])
                """
            }
        }

        then {
	    def reads1 = path(workflow.out.decontaminated_reads.get(0)[1][0])
	        .linesGzip
		.collect{
	            if(it.charAt(0)=="@"){
	                return it
	 	    }
	        }
		.findAll{ it != null }
	        .sort()

	    def reads2 = path(workflow.out.decontaminated_reads.get(0)[1][1])
	        .linesGzip
		.collect{
	            if(it.charAt(0)=="@"){
	                return it
	 	    }
	        }
		.findAll{ it != null }
	        .sort()

            assert workflow.success
            assert snapshot(
                reads1, reads2, 
		// workflow.out.decontaminated_reads,
	        // workflow.out.host_stats, 
		// workflow.out.phix_stats, 
		workflow.out.versions
	    ).match()
        }

    }

    test("hg38 synthetic reads output should match snapshot and not fail") {

        when {
	    params {
	        remove_phix = false
	    }
            workflow {
                """
                input[0] = Channel.of([
		    ['id': 'test', 'single_end': false, 'platform': 'wgs'],
		    [
		        file("${projectDir}/tests/fixtures/decontam_shortread/hg38_reads_1.fq.gz", checkIfExists: true),
		        file("${projectDir}/tests/fixtures/decontam_shortread/hg38_reads_2.fq.gz", checkIfExists: true),
		    ]
		])
		input[1] = Channel.of([
		    ['id': 'host_genome', 'base_dir': '.', 'files': ['bwa_index_prefix': 'hg38_mini.fa', 'genome': 'hg38_mini.fa']],
		    file("${projectDir}/tests/fixtures/dbs/hg38_mini", checkIfExists: true)
		])
		input[2] = Channel.of([
		    ['id': 'phix', 'base_dir': '.', 'files': ['bwa_index_prefix': 'MN385565.fasta', 'genome': 'MN385565.fasta']],
		    file("${projectDir}/tests/fixtures/dbs/phix", checkIfExists: true)
		])
                """
            }
        }

        then {
            assert workflow.success
	    assert workflow.out.decontaminated_reads.size()==0
            assert snapshot(
		// workflow.out.decontaminated_reads,
	        // workflow.out.host_stats, 
		// workflow.out.phix_stats, 
		workflow.out.versions
	    ).match()
        }

    }

}
