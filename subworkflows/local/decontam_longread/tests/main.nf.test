nextflow_workflow {

    name "Test Subworkflow DECONTAM_LONGREAD"
    script "../main.nf"
    workflow "DECONTAM_LONGREAD"

    tag "subworkflows"
    tag "subworkflows_"
    tag "subworkflows/decontam_longread"
    tag "minimap2"
    tag "minimap2/align"

    test("mini ONT sample output should match snapshot") {

        when {
	    params {
	        remove_phix = true
	    }
            workflow {
                """
                input[0] = Channel.of([
		    ['id': 'test', 'single_end': true, 'platform': 'ont'],
	            file("${projectDir}/tests/fixtures/decontam_shortread/ERR10889147_mini_1.fq.gz", checkIfExists: true),
		])
		input[1] = Channel.of([
		    ['id': 'host_genome_minimap2', 'base_dir': '.', 'files': ['index': 'hg38_mini.mmi']],
		    file("${projectDir}/tests/fixtures/dbs/hg38_mini_minimap2", checkIfExists: true)
		])
                """
            }
        }

        then {
	    def reads = path(workflow.out.decontaminated_reads.get(0)[1])
	        .linesGzip
		.collect{
	            if(it.charAt(0)=="@"){
	                return it
	 	    }
	        }
		.findAll{ it != null }
	        .sort()

            assert workflow.success
            assert snapshot(
                reads, 
		workflow.out.versions
	    ).match()
        }

    }

    test("mini PB sample output should match snapshot") {

        when {
	    params {
	        remove_phix = true
	    }
            workflow {
                """
                input[0] = Channel.of([
		    ['id': 'test', 'single_end': true, 'platform': 'pb'],
	            file("${projectDir}/tests/fixtures/decontam_shortread/ERR10889147_mini_2.fq.gz", checkIfExists: true),
		])
		input[1] = Channel.of([
		    ['id': 'host_genome_minimap2', 'base_dir': '.', 'files': ['index': 'hg38_mini.mmi']],
		    file("${projectDir}/tests/fixtures/dbs/hg38_mini_minimap2", checkIfExists: true)
		])
                """
            }
        }

        then {
	    def reads = path(workflow.out.decontaminated_reads.get(0)[1])
	        .linesGzip
		.collect{
	            if(it.charAt(0)=="@"){
	                return it
	 	    }
	        }
		.findAll{ it != null }
	        .sort()

            assert workflow.success
            assert snapshot(
                reads, 
		workflow.out.versions
	    ).match()
        }

    }

    test("mini ONT sample with added hg38 synthetic reads sample output should match snapshot") {

        when {
	    params {
	        remove_phix = true
	    }
            workflow {
                """
                input[0] = Channel.of([
		    ['id': 'test', 'single_end': true, 'platform': 'ont'],
		    file("${projectDir}/tests/fixtures/decontam_shortread/ERR10889147_mini_plus_hg38_1.fq.gz", checkIfExists: true),
		])
		input[1] = Channel.of([
		    ['id': 'host_genome_minimap2', 'base_dir': '.', 'files': ['index': 'hg38_mini.mmi']],
		    file("${projectDir}/tests/fixtures/dbs/hg38_mini_minimap2", checkIfExists: true)
		])
                """
            }
        }

        then {
	    def reads = path(workflow.out.decontaminated_reads.get(0)[1])
	        .linesGzip
		.collect{
	            if(it.charAt(0)=="@"){
	                return it
	 	    }
	        }
		.findAll{ it != null }
	        .sort()

            assert workflow.success
            assert snapshot(
                reads, 
		workflow.out.versions
	    ).match()
        }

    }

    test("hg38 synthetic ONT reads sample output should match snapshot") {

        when {
	    params {
	        remove_phix = true
	    }
            workflow {
                """
                input[0] = Channel.of([
		    ['id': 'test', 'single_end': true, 'platform': 'ont'],
		    file("${projectDir}/tests/fixtures/decontam_shortread/hg38_reads_1.fq.gz", checkIfExists: true),
		])
		input[1] = Channel.of([
		    ['id': 'host_genome_minimap2', 'base_dir': '.', 'files': ['index': 'hg38_mini.mmi']],
		    file("${projectDir}/tests/fixtures/dbs/hg38_mini_minimap2", checkIfExists: true)
		])
                """
            }
        }

        then {
            assert workflow.success
	    assert workflow.out.decontaminated_reads.size()==0
            assert snapshot(workflow.out.versions).match()
        }

    }

}
