/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'PIPELINE:READSMERGE:RENAMEPAIREDFASTXHEADERS' {
        ext.args = '-d .'
    }

    // withName: 'PIPELINE:READSMERGE:FASTP' {
    //     ext.args = '--include_unmerged'
    // }

    withName: 'PIPELINE:READSMERGE:SEQTK_SEQ' {
        ext.args = '-a'
    }

    // withName: 'PIPELINE:SEQTK_SEQ' {
    //     ext.args = '-a'
    // }

    // withName: 'PIPELINE:QC:SEQTK_SEQ' {
    //     ext.args = '-a'
    // }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: MAPSEQ {
        ext.args = '--outfmt simple'
    }

    withName: 'PIPELINE:QC:FASTP' {
        publishDir = [
            path: { "${params.outdir}/qc/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('.json')) {
                    return "${meta.id}_fastp.json"
                }
            },
        ]
    }

    withName: 'PIPELINE:DECONTAM_SHORTREAD:CHUNKFASTX_PHIX' {
        ext.args = '-b 1M'
    }

    withName: 'PIPELINE:DECONTAM_SHORTREAD:CHUNKFASTX_HOST' {
        ext.args = '-b 1M'
    }

    withName: 'PIPELINE:DECONTAM_LONGREAD:CHUNKFASTX' {
        ext.args = '-b 1M'
    }

    withName: 'PIPELINE:DECONTAM_SHORTREAD:DECONTAMBAM_HOST' {
        publishDir = [
            path: { "${params.outdir}/decontam/short_read/host" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('_summary_stats.txt')) {
                    return filename
                }
            },
        ]
    }

    withName: 'PIPELINE:DECONTAM_SHORTREAD:DECONTAMBAM_PHIX' {
        publishDir = [
            path: { "${params.outdir}/decontam/short_read/phix" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('_summary_stats.txt')) {
                    return filename
                }
            },
        ]
    }

    withName: 'PIPELINE:DECONTAM_LONGREAD:DECONTAMBAM' {
        publishDir = [
            path: { "${params.outdir}/decontam/long_read/host" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('_summary_stats.txt')) {
                    return filename
                }
            },
        ]
    }

    withName: 'PIPELINE:MAPSEQ_OTU_KRONA:MAPSEQ2BIOM' {
        publishDir = [
            path: { "${params.outdir}/rrna/otu_table" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('.txt')) {
                    return "${meta.id}_krona.tsv"
                }
            },
        ]
    }

    withName: 'PIPELINE:MAPSEQ_OTU_KRONA:MAPSEQ' {
        publishDir = [
            path: { "${params.outdir}/rrna/out" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('.mseq')) {
                    return "${meta.id}_mapseq.mseq"
                }
            },
        ]
    }

    withName: 'PIPELINE:MAPSEQ_OTU_KRONA:KRONA_KTIMPORTTEXT' {
        publishDir = [
            path: { "${params.outdir}/rrna/krona" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('.html')) {
                    return "${meta.id}_krona.html"
                }
            },
        ]
    }

    withName: 'PIPELINE:MOTUS_KRONA:MOTUS_PROFILE' {
        ext.args = '-c -p -q'
        publishDir = [
            path: { "${params.outdir}/motus/out" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('.out')) {
                    return "${meta.id}_motus.out"
                }
            },
        ]
    }

    withName: 'PIPELINE:MOTUS_KRONA:MOTUS2KRONA' {
        publishDir = [
            path: { "${params.outdir}/motus/otu_table" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('.tsv')) {
                    return "${meta.id}_krona.tsv"
                }
            },
        ]
    }

    withName: 'PIPELINE:MOTUS_KRONA:KRONA_KTIMPORTTEXT' {
        publishDir = [
            path: { "${params.outdir}/motus/krona" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.contains('.html')) {
                    return "${meta.id}_krona.html"
                }
            },
        ]
    }

    withName: 'PIPELINE:PROFILE_HMMSEARCH_PFAM:HMMER_HMMSEARCH' {
        ext.args = "-Z ${params.databases.pfam.variables.num_models} --cut_ga"
    }

    withName: 'PIPELINE:PROFILE_HMMSEARCH_PFAM:COMBINEHMMSEARCHTBL' {
        publishDir = [
            path: { "${params.outdir}/hmmer" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if(filename.contains('.domtbl')){
                    return filename
                }
            },
        ]
    }


    withName: 'PIPELINE:PROFILE_HMMSEARCH_PFAM:PARSEHMMSEARCHCOVERAGE' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/hmmer" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if(filename.contains('.tsv')){
                    return filename
                }
            },
        ]
    }

    withName: 'PIPELINE:PROFILE_HMMSEARCH_PFAM:SEQKIT_TRANSLATE' {
        ext.args = "--append-frame --allow-unknown-codon --frame 6 --out-subseqs --min-len 15"
    }

    withName: MULTIQC {
        ext.args = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
